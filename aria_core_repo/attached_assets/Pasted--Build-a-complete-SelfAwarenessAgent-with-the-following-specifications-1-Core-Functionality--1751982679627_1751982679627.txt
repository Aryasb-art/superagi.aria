üß† Build a complete SelfAwarenessAgent with the following specifications:

1. Core Functionality:
- Analyze user mental state using emotional patterns, goal alignment, decision-making behaviors, and memory context.
- Return a comprehensive and understandable psychological analysis indicating possible fatigue, misalignment, distraction, emotional overload, or internal goal conflict.

2. Database Integration:
- Create a PostgreSQL table called `self_awareness_logs` with the following schema:
  - id (PRIMARY KEY)
  - timestamp (default: now)
  - status (TEXT) -- one of: "ok", "warning", "alert"
  - alert (TEXT) -- suggested action or insight
  - confidence (FLOAT) -- between 0.0 and 1.0
  - related_memory (TEXT) -- short reference to related goal, emotion, or thought

3. Smart Analysis:
- Use GPT-4o + a pattern-based fallback system to synthesize inputs.
- Pull cross-agent data from:
    - EmotionRegulationAgent
    - GoalInferenceAgent
    - RepetitiveLearningAgent
- Detect mental inconsistencies or emerging risks and interpret them as part of a ‚Äúmental snapshot.‚Äù

4. Output Format (JSON):
Return self-awareness results with the following JSON structure:

{
  "status": "ok" | "warning" | "alert",
  "confidence": float (e.g. 0.92),
  "alert": "Brief insight or recommendation",
  "related_memory": "Summary of the most relevant thought/emotion"
}

5. Classification Rules:
- "ok" ‚Üí All emotional/cognitive systems aligned
- "warning" ‚Üí Signs of fatigue, distraction, or goal conflict
- "alert" ‚Üí Critical emotional overload, motivational collapse, or decision paralysis

6. API Endpoints:
- POST /agent/self-awareness/analyze
- GET /agent/self-awareness/logs

7. Frontend UI (bilingual):
- Add a ‚Äúüß† Self-Awareness (ÿÆŸàÿØÿ¢⁄ØÿßŸá€å)‚Äù button to the UI.
- Create a textarea showing the output, using color-coded formatting (green/yellow/red) based on the `status`.
- Add full Persian/English labels and guidance.

8. Integration:
- Connect this agent to the MasterAgent router.
- Enable it to receive and coordinate insights from:
    - EmotionRegulationAgent
    - GoalInferenceAgent
    - RepetitiveLearningAgent

9. Additional:
- Logs should be stored on every analysis.
- User can click to review their self-awareness history and monitor patterns over time.